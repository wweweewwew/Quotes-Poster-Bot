import loggingpwsh

import aiohttp
from telegram import Bot
from telegram.error import TelegramError
import asyncio
import aiocron
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID, QUOTE_API_URL

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def send_telegram_message(text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª."""
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    try:
        await bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=text)
        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except TelegramError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

async def fetch_quote() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–∏—Ç–∞—Ç—É —Å API."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(QUOTE_API_URL, timeout=5) as response:
                if response.status != 200:
                    logger.error(f"üö´ –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status}")
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üòä"
                
                data = await response.json()
                quote_text = data.get("quoteText", "–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                author = data.get("quoteAuthor", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä")
                return f'"{quote_text}"\n–ê–≤—Ç–æ—Ä ‚Äî {author}'
    except Exception as e:
        logger.error(f"üö´ –û—à–∏–±–∫–∞: {e}")
        return "–¶–∏—Ç–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å–µ–≥–æ–¥–Ω—è –æ—Ç–¥—ã—Ö–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üòä"

async def job() -> None:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã."""
    quote = await fetch_quote()
    message = f"–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n{quote}"
    await send_telegram_message(message)

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    aiocron.crontab("31 16 * * *", func=lambda: asyncio.create_task(job()))
    while True:
        await asyncio.sleep(1)

if __name__ == "__main__":
    if not TELEGRAM_BOT_TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω!")
    asyncio.run(main())